# Generated by Django 5.1.6 on 2025-03-03 07:32

import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('street', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', django_countries.fields.CountryField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('catalogue_id', models.IntegerField()),
                ('profile', models.DecimalField(decimal_places=1, max_digits=4)),
                ('item_type', models.TextField(choices=[('Plates', [('Plate', 'Plate'), ('Titanium Mesh', 'Titanium Mesh')]), ('Instruments', [('Scissors', 'Scissors'), ('Drill', 'Drill'), ('Screwdriver', 'Screwdriver'), ('Screwdriver Holding Device', 'Screwdriver Holding Device')]), ('Containers', [('Container', 'Container'), ('Rack', 'Rack'), ('Tray', 'Tray')]), ('Other', [('Screw', 'Screw')])])),
                ('description', models.TextField()),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('vat_price', models.DecimalField(decimal_places=2, max_digits=8)),
            ],
        ),
        migrations.CreateModel(
            name='TrayType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('firstname', models.CharField(blank=True, max_length=128, null=True)),
                ('surname', models.CharField(blank=True, max_length=128, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('practice_number', models.IntegerField(unique=True)),
                ('comments', models.TextField()),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('user', models.OneToOneField(blank=True, limit_choices_to=models.Q(('is_staff', False), models.Q(('is_superuser', False), _negated=True), models.Q(('is_active', True), _negated=True), models.Q(('doctor__isnull', False), _negated=True)), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='doctor', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tray',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=25, unique=True)),
                ('tray_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trays', to='core.traytype')),
            ],
        ),
        migrations.CreateModel(
            name='TrayItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tray_items', to='core.product')),
                ('tray_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tray_items', to='core.traytype')),
            ],
            options={
                'unique_together': {('tray_type', 'product')},
            },
        ),
    ]
